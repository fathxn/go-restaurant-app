// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/restaurant/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "go-restaurant-app/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRestaurantUsecase is a mock of Usecase interface.
type MockRestaurantUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantUsecaseMockRecorder
}

// MockRestaurantUsecaseMockRecorder is the mock recorder for MockRestaurantUsecase.
type MockRestaurantUsecaseMockRecorder struct {
	mock *MockRestaurantUsecase
}

// NewMockRestaurantUsecase creates a new mock instance.
func NewMockRestaurantUsecase(ctrl *gomock.Controller) *MockRestaurantUsecase {
	mock := &MockRestaurantUsecase{ctrl: ctrl}
	mock.recorder = &MockRestaurantUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurantUsecase) EXPECT() *MockRestaurantUsecaseMockRecorder {
	return m.recorder
}

// CheckSession mocks base method.
func (m *MockRestaurantUsecase) CheckSession(ctx context.Context, data model.UserSession) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession.
func (mr *MockRestaurantUsecaseMockRecorder) CheckSession(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockRestaurantUsecase)(nil).CheckSession), ctx, data)
}

// GetMenuList mocks base method.
func (m *MockRestaurantUsecase) GetMenuList(ctx context.Context, menuType string) ([]model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuList", ctx, menuType)
	ret0, _ := ret[0].([]model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuList indicates an expected call of GetMenuList.
func (mr *MockRestaurantUsecaseMockRecorder) GetMenuList(ctx, menuType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuList", reflect.TypeOf((*MockRestaurantUsecase)(nil).GetMenuList), ctx, menuType)
}

// GetOrderInfo mocks base method.
func (m *MockRestaurantUsecase) GetOrderInfo(ctx context.Context, request model.GetOrderInfoRequest) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderInfo", ctx, request)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderInfo indicates an expected call of GetOrderInfo.
func (mr *MockRestaurantUsecaseMockRecorder) GetOrderInfo(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderInfo", reflect.TypeOf((*MockRestaurantUsecase)(nil).GetOrderInfo), ctx, request)
}

// LoginUser mocks base method.
func (m *MockRestaurantUsecase) LoginUser(ctx context.Context, request model.LoginRequest) (model.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, request)
	ret0, _ := ret[0].(model.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockRestaurantUsecaseMockRecorder) LoginUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockRestaurantUsecase)(nil).LoginUser), ctx, request)
}

// Order mocks base method.
func (m *MockRestaurantUsecase) Order(ctx context.Context, request model.OrderMenuRequest) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", ctx, request)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Order indicates an expected call of Order.
func (mr *MockRestaurantUsecaseMockRecorder) Order(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockRestaurantUsecase)(nil).Order), ctx, request)
}

// RegisterUser mocks base method.
func (m *MockRestaurantUsecase) RegisterUser(ctx context.Context, request model.RegisterRequest) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, request)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockRestaurantUsecaseMockRecorder) RegisterUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockRestaurantUsecase)(nil).RegisterUser), ctx, request)
}
